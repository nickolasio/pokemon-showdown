#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var Console, EventEmitter, MESSAGE_TYPES, PokeClient, chalk, client, dump, readline, ui, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events');

  readline = require('readline');

  util = require('util');

  chalk = require('chalk');

  PokeClient = require('./').PokeClient;

  MESSAGE_TYPES = PokeClient.MESSAGE_TYPES;

  Console = (function(superClass) {
    extend(Console, superClass);

    function Console(arg) {
      var ref, ref1, ref2, ref3;
      ref = arg != null ? arg : {}, this.stdin = (ref1 = ref.stdin) != null ? ref1 : process.stdin, this.stdout = (ref2 = ref.stdout) != null ? ref2 : process.stdout, this.promptPrefix = (ref3 = ref.promptPrefix) != null ? ref3 : '> ';
      this.readlineInterface = readline.createInterface(this.stdin, this.stdout);
      this.readlineInterface.setPrompt(this.promptPrefix);
      this.readlineInterface.on('line', (function(_this) {
        return function(data) {
          return _this.emit('line', data);
        };
      })(this)).on('close', (function(_this) {
        return function() {
          return _this.emit('close');
        };
      })(this));
    }

    Console.prototype.prompt = function() {
      return this.readlineInterface.prompt(true);
    };

    Console.prototype.print = function(msg) {
      this.clear();
      this.stdout.write(msg.trim() + '\n');
      return this.prompt();
    };

    Console.prototype.clear = function() {
      readline.clearLine(this.stdout, 0);
      return readline.moveCursor(this.stdout, -1 * this.promptPrefix.length, 0);
    };

    return Console;

  })(EventEmitter);

  ui = new Console();

  dump = function(obj) {
    return util.inspect(obj, {
      showHidden: true,
      depth: null
    });
  };

  client = new PokeClient();

  client.connect();

  client.on('connect', function() {
    ui.print(chalk.green('connected (press CTRL+C to quit, :h for help)'));
    return ui.on('line', function(line) {
      var cmd, e, error, ret;
      if (line.trim() === ':h') {
        ui.print(chalk.blue('Usage:\n\n  :h       -- show this help page\n  :e [CMD] -- evaluate CMD\n'));
      } else if (line.match(/:e (.*)/)) {
        cmd = line.substr(3).trim();
        try {
          ret = eval(cmd);
          ui.print(chalk.blue("returned: " + (dump(ret))));
        } catch (error) {
          e = error;
          ui.print(chalk.red(e));
        }
      } else {
        client.send(line);
      }
      return ui.prompt();
    });
  }).on('disconnect', function() {
    ui.print(chalk.green('disconnected'));
    ui.clear();
    return process.exit(0);
  }).on('message', function(message) {
    switch (message.type) {
      case MESSAGE_TYPES.OTHER.UNKNOWN:
        return ui.print(chalk.inverse('< ' + dump(message)));
      default:
        return ui.print('< ' + dump(message));
    }
  }).on('error:*', function(err) {
    return ui.print(chalk.red('[ERROR] ' + JSON.stringify(err)));
  }).onAny(function(event, data) {
    return ui.print(chalk.dim(event + " " + (dump(data))));
  });

  ui.on('close', function() {
    return process.exit(0);
  });

}).call(this);
